import streamlit as st
import plotly.express as px
import pandas as pd
from typing import Optional

class FormattingAgent:
    """
    Agente respons√°vel por formatar e apresentar os resultados obtidos
    do Agente 2 de forma amig√°vel para o usu√°rio final.
    
    Este √© o "Agente 3" do fluxo de orquestra√ß√£o:
      - Entrada: DataFrame + tipo de visualiza√ß√£o (opcional)
      - Sa√≠da: Exibi√ß√£o no Streamlit (tabela, m√©trica ou gr√°fico interativo)
    """

    @staticmethod
    def format_response(df: pd.DataFrame, visualization: Optional[str] = None):
        """
        Formata a resposta com base no DataFrame e no tipo de visualiza√ß√£o.
        
        - Se o DataFrame estiver vazio ‚Üí mostra aviso.
        - Se houver 1 linha e 1 coluna ‚Üí mostra como m√©trica.
        - Caso contr√°rio ‚Üí exibe tabela e, se solicitado, gera visualiza√ß√£o.
        
        Args:
            df (pd.DataFrame): Dados retornados do Agente 2
            visualization (Optional[str]): Tipo de visualiza√ß√£o (pie, bar, line, etc.)
        """
        # Verifica se o DataFrame est√° vazio, se sim, exibe aviso e retorna
        if df.empty:
            st.warning("Nenhum resultado encontrado")
            return

        # Caso especial: se o DataFrame tem apenas 1 linha e 1 coluna, mostra m√©trica simples
        if df.shape == (1, 1):
            valor = df.iloc[0, 0]  # pega o √∫nico valor
            st.metric("Resultado", f"{valor:,}")  # formata n√∫mero com v√≠rgulas e exibe
            return

        # Ajuste de nome de coluna, caso espec√≠fico para "total_reclamacoes"
        if "total_reclamacoes" in df.columns:
            df = df.rename(columns={"total_reclamacoes": "Total de Reclama√ß√µes"})
        
        # Exibe os dados completos dentro de um expansor (se√ß√£o recolh√≠vel)
        with st.expander("üìã Dados Completos", expanded=True):
            st.dataframe(df, use_container_width=True)  # tabela responsiva

        # Se um tipo de visualiza√ß√£o foi passado, gera o gr√°fico correspondente
        if visualization:
            FormattingAgent._generate_visualization(df, visualization)

    @staticmethod
    def _generate_visualization(df: pd.DataFrame, vis_type: str):
        """
        Gera visualiza√ß√£o interativa com Plotly de acordo com o tipo informado.
        
        - Atualmente implementado: gr√°fico de pizza.
        - Pode ser expandido para barras, linhas, etc.
        
        Args:
            df (pd.DataFrame): Dados j√° tratados
            vis_type (str): Tipo de visualiza√ß√£o (ex: 'pie')
        """
        try:
            if vis_type == "pie":
                # Valida√ß√£o: gr√°fico de pizza requer pelo menos 2 colunas (categoria e valor)
                if len(df.columns) < 2:
                    st.error("""
                    **Dados insuficientes para gr√°fico de pizza**
                    - Necess√°rio: 1 coluna de categorias + 1 coluna num√©rica
                    - Exemplo SQL correto:
                    ```sql
                    SELECT canal, COUNT(*) as total 
                    FROM suporte 
                    WHERE resolvido = 0 
                    GROUP BY canal
                    ```
                    """)
                    return

                # Cria o gr√°fico de pizza tipo "donut" com Plotly Express
                fig = px.pie(
                    df,
                    names=df.columns[0],       # coluna para categorias (labels)
                    values=df.columns[1],      # coluna para valores num√©ricos
                    title="Reclama√ß√µes N√£o Resolvidas por Canal",
                    hole=0.3,                  # cria um donut (buraco no centro)
                    hover_data=[df.columns[1]] # mostra valor ao passar o mouse
                )

                # Personaliza o texto dentro do gr√°fico e o tooltip
                fig.update_traces(
                    textinfo='percent+label',  # mostra % e nome da categoria
                    hovertemplate="<b>%{label}</b><br>%{value} reclama√ß√µes (%{percent})"
                )

                # Exibe o gr√°fico dentro do Streamlit responsivamente
                st.plotly_chart(fig, use_container_width=True)

        except Exception as e:
            # Se houver erro ao gerar o gr√°fico, mostra mensagem de erro
            st.error(f"Erro ao gerar visualiza√ß√£o: {str(e)}")
