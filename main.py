import streamlit as st
from agents.natural_language import NaturalLanguageAgent  # Agente que interpreta comandos em linguagem natural e gera SQL
from agents.data_consultant import DataConsultantAgent    # Agente que executa queries SQL e retorna dados
from agents.formatting import FormattingAgent             # Agente que formata e exibe dados (tabelas, gr√°ficos)
from utils.ollama import check_ollama_connection          # Fun√ß√£o para verificar se o servidor Ollama est√° ativo

# Fun√ß√£o para ajustar dinamicamente a altura da text_area conforme n√∫mero de linhas
def get_text_area_height(text, line_height=24, min_lines=3, max_lines=15):
    lines = text.count('\n') + 1
    lines = max(min_lines, min(lines, max_lines))
    return lines * line_height

# Configura√ß√µes iniciais da p√°gina Streamlit
st.set_page_config(
    page_title="Painel Inteligente de An√°lise de Dados",  # T√≠tulo da aba do navegador
    page_icon="ü§ñ",                                       # √çcone da p√°gina
    layout="wide"                                         # Layout em largura total
)

def main():
    # Verifica se o servidor Ollama est√° rodando, se n√£o exibe erro e para execu√ß√£o
    if not check_ollama_connection():
        st.error("Servidor Ollama n√£o est√° respondendo. Execute: ollama serve")
        st.stop()

    # T√≠tulo principal da aplica√ß√£o
    st.title("ü§ñ Painel Inteligente de An√°lise de Dados")

    # Inicializa vari√°veis de estado da sess√£o caso n√£o existam
    if "history" not in st.session_state:
        st.session_state.history = []      # Hist√≥rico de consultas feitas
    if "last_sql" not in st.session_state:
        st.session_state.last_sql = ""     # √öltima query SQL gerada
    if "last_df" not in st.session_state:
        st.session_state.last_df = None    # √öltimo DataFrame resultante da consulta
    if "last_vis_type" not in st.session_state:
        st.session_state.last_vis_type = None  # Tipo de visualiza√ß√£o para exibir o resultado
    if "user_command" not in st.session_state:
        st.session_state.user_command = ""

    # Cria a barra lateral (sidebar)
    with st.sidebar:
        st.header("üìå Exemplos Prontos")  # Cabe√ßalho para exemplos de consultas
        # Dicion√°rio com exemplos para facilitar o uso
        examples = {
            "Estados com mais clientes via app em maio": "Liste os 5 estados com maior n√∫mero de clientes que compraram via app em maio. Retorne a lista em formato de tabela.",
            "Clientes que interagiram com campanhas WhatsApp em 2024": "Quantos clientes interagiram com campanhas de WhatsApp em 2024?",
            "Categorias com maior m√©dia de compras por cliente": "Quais categorias de produto tiveram o maior n√∫mero de compras em m√©dia por cliente?",
            "N√∫mero de reclama√ß√µes n√£o resolvidas por canal": "Qual o n√∫mero de reclama√ß√µes n√£o resolvidas por canal? Retorne um gr√°fico de pizza."
        }
        # Cria bot√µes para cada exemplo, ao clicar preenche o campo de consulta
        for name, query in examples.items():
            if st.button(name, help=query, use_container_width=True):
                st.session_state.user_command = query

        st.markdown("---")  # Linha separadora

        # Dicas para o usu√°rio melhorar os comandos
        st.header("üí° Dicas para escrever comandos")
        st.markdown(
            """
            - Seja espec√≠fico no que deseja saber (ex: per√≠odo, canal, tipo de dado).
            - Use palavras como ‚Äúgr√°fico de pizza‚Äù, ‚Äúlista em tabela‚Äù, ‚Äútop 5‚Äù, para ajudar na visualiza√ß√£o.
            """
        )

        st.markdown("---")

        # Hist√≥rico das √∫ltimas consultas feitas pelo usu√°rio
        st.header("üïò Hist√≥rico de Consultas")
        if st.session_state.history:
            # Mostra as √∫ltimas 10 consultas, da mais recente para a mais antiga
            for i, item in enumerate(reversed(st.session_state.history[-10:]), 1):
                st.write(f"{i}. {item}")
        else:
            st.write("Nenhuma consulta realizada ainda.")

    # Calcula altura din√¢mica da caixa de texto com base no texto atual
    height = get_text_area_height(st.session_state.get("user_command", ""))

    # Campo principal para o usu√°rio digitar sua consulta em linguagem natural, altura din√¢mica
    query = st.text_area(
        "Digite sua consulta:",
        placeholder="Ex: Total de vendas por categoria em 2024 como gr√°fico de pizza",
        key="user_command",
        height=height
    )

    # Bot√£o para processar a consulta
    if st.button("‚ñ∂Ô∏è Calcular e Visualizar", type="primary"):
        with st.spinner("Processando sua consulta..."):  # Exibe indicador de processamento
            # Interpreta a consulta em linguagem natural para SQL e tipo de visualiza√ß√£o
            sql, vis_type = NaturalLanguageAgent.interpret_command(query)

            # Executa a query SQL e retorna os dados
            df = DataConsultantAgent.run_query(sql)

            # Armazena os resultados e query no estado da sess√£o
            st.session_state.last_sql = sql
            st.session_state.last_df = df
            st.session_state.last_vis_type = vis_type

            # Salva o texto da consulta no hist√≥rico, se n√£o vazio
            if query.strip():
                st.session_state.history.append(query.strip())

    # Exibe os resultados da √∫ltima consulta
    if st.session_state.last_df is not None:
        with st.expander("üîç Consulta SQL Gerada", expanded=False):
            # Exibe a query SQL gerada para transpar√™ncia
            st.code(st.session_state.last_sql, language="sql")

        # Caso o resultado seja vazio, avisa o usu√°rio
        if st.session_state.last_df.empty:
            st.warning("Nenhum resultado encontrado para a consulta.")
        else:
            # Formata e exibe o resultado (tabela, gr√°fico etc.)
            FormattingAgent.format_response(st.session_state.last_df, st.session_state.last_vis_type)

            # Gera CSV para download dos dados
            csv = st.session_state.last_df.to_csv(index=False, decimal=",")
            st.download_button(
                "üì§ Exportar CSV",
                data=csv,
                file_name="resultado.csv",
                mime="text/csv"
            )

# Executa a fun√ß√£o principal quando o script √© chamado
if __name__ == "__main__":
    main()
